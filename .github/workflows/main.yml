name: widget-server pipe

on:
  push:
    branches:
      - main
env:
  AWS_REGION: us-east-2

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Use PNPM
        id: install-pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
        
      - name: Install dependencies
        id: install-dependencies
        run: | 
          pnpm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: ECR AWS Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        id: set-up-docker-buildx
        uses: docker/setup-buildx-action@v3

      #- name: Generate tag
      #  id: generate_tag
      #  run: |
      #    SHA=$(echo $GITHUB_SHA | head -c7)
      #    echo "SHA=$SHA" >> $GITHUB_OUTPUT
      
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          #cache-from: type=gha
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:latest
      
      #- name: Render task definition
      #  id: reder-task-definition
      #  uses: aws-actions/amazon-ecs-render-task-definition@v1
      #  with:
      #    task-definition: .aws/task-definition.json
      #    container-name: widget-server
      #    image: ${{steps.login-ecr.outputs.registry}}/${{ vars.ECR_REPOSITORY }}:${{ steps.generate-tag.outputs.sha }}
 
      #- name: Deploy Amazon ECS
      #  id: deploy-amazon-ecs
      #  uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      #  with:
      #    task-definition: ${{ steps.reder-task-definition.outputs.task-definition }}
      #    service: task-widget-server-service-qsyizhfb
      #    cluster: cluster-widget-server
      #    wait-for-service-stability: true

      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster cluster-widget-server \
            --service task-widget-server-service-qsyizhfb \
            --force-new-deployment

      #- name: Deploy to App Runner
      #  id: deploy-app-runner
      #  uses: awslabs/amazon-app-runner-deploy@main
      #  env: 
      #      CLOUDFLARE_ACCESS_KEY_ID: "#"
      #      CLOUDFLARE_SECRET_ACCESS_KEY: "#"
      #      CLOUDFLARE_BUCKET: "#"
      #      CLOUDFLARE_ACCOUNT_ID: "#"
      #      CLOUDFLARE_PUBLIC_URL: "http://localhost.com/"
      #  with:
      #    service: widtget-server
      #    image: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:v1
      #    region: ${{ vars.AWS_REGION }}
      #    cpu: 1vCPU
      #    memory: 2GB
      #    port: 3333
      #    access-role-arn: arn:aws:iam::762233749846:role/app-runner-service-role
      #    wait-for-service-stability-seconds: 180
      #    copy-env-vars: |
      #      CLOUDFLARE_ACCESS_KEY_ID
      #      CLOUDFLARE_SECRET_ACCESS_KEY
      #      CLOUDFLARE_BUCKET
      #      CLOUDFLARE_ACCOUNT_ID
      #      CLOUDFLARE_PUBLIC_URL

      #- name: App Runner Check
      #  run: echo "App running... ${{ steps.deploy-app-runner.outputs.service-url }}"


      #- name: Build and push image AWS ECR
      #  id: build-push-image
      #  env:
      #    ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      #    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #    IMAGE_TAG: ${{ steps.generate_tag.outputs.SHA }}
      #  run: | 
      #    docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
      #    docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
     
