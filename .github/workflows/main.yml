name: widget-server pipe

on:
  push:
    branches:
      - main
env:
  AWS_REGION: us-east-2

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Use PNPM
        id: install-pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
        
      - name: Install dependencies
        id: install-dependencies
        run: | 
          pnpm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: ECR AWS Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        id: set-up-docker-buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate tag
        id: generate_tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "SHA=$SHA" >> $GITHUB_OUTPUT

      - name: Only load image to scan
        id: load-image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:scan

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@v0.29.0
        with:
          image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:scan'
          format: 'table'
          output: 'trivy-report.json'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          exit-code: 1
          ignore-policy: '.trivyignore'
      
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          cache-from: type=gha
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ steps.generate_tag.outputs.SHA }}

      #- name: Build and push image AWS ECR
      #  id: build-push-image
      #  env:
      #    ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      #    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #    IMAGE_TAG: ${{ steps.generate_tag.outputs.SHA }}
      #  run: | 
      #    docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
      #    docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
     
